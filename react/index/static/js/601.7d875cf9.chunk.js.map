{"version":3,"file":"static/js/601.7d875cf9.chunk.js","mappings":"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","sources":["pages/games/shudu/init.js"],"sourcesContent":["function nextNumber(num) {\n  num += 1;\n  num = num > 9 ? 1 : num;\n  return num;\n}\nfunction generateRow() {\n  let arr = [];\n  for (let i = 0; i < 9; i++) {\n    arr[i] = i + 1;\n  }\n  return arr;\n}\nexport const row_contains = (arr, num) => {\n  if (arr == null) {\n    return false;\n  }\n  for (let j of arr) {\n    if (j && j.value === num) {\n      return true;\n    }\n  }\n  return false;\n};\nexport const column_contains = (arr, column, num) => {\n  for (let j of arr) {\n    if (!j[column]) {\n      return false;\n    }\n    if (j[column].value === num) {\n      return true;\n    }\n  }\n  return false;\n};\nexport const block_contains = (arr, i, j, num) => {\n  let row = Math.floor(i / 3) * 3;\n  let column = Math.floor(j / 3) * 3;\n  let temp = [];\n  for (let k = row; k < row + 3; k++) {\n    for (let l = column; l < column + 3; l++) {\n      if (arr[k] && arr[k][l]) temp[(k - row) * 3 + (l - column)] = {\n        value: arr[k][l]\n      };\n    }\n  }\n  return row_contains(temp, num);\n};\nfunction switchRow(arr, i, j) {\n  for (let k = 0; k < arr[i].length; k++) {\n    let temp = arr[i][k];\n    arr[i][k] = arr[j][k];\n    arr[j][k] = temp;\n  }\n}\nfunction switchColumn(arr, i, j) {\n  for (let k = 0; k < arr.length; k++) {\n    let temp = arr[k][i];\n    arr[k][i] = arr[k][j];\n    arr[k][j] = temp;\n  }\n}\nfunction random(seeds) {\n  return Math.ceil(Math.random() * seeds);\n}\nfunction switchRowAndColumn(arr) {\n  let times = random(40) + 10;\n  for (let i = 0; i < times; i++) {\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchRow(arr, j, k);\n    }\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchRow(arr, j + 3, k + 3);\n    }\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchRow(arr, j + 6, k + 6);\n    }\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchColumn(arr, j, k);\n    }\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchColumn(arr, j + 3, k + 3);\n    }\n    {\n      let j = random(3) - 1;\n      let k = random(3) - 1;\n      if (j !== k) switchColumn(arr, j + 6, k + 6);\n    }\n  }\n}\nfunction clearCells(level, arr) {\n  let min, max;\n  switch (level) {\n    case 1:\n      min = 20;\n      max = 10;\n      break;\n    case 2:\n      min = 30;\n      max = 10;\n      break;\n    case 3:\n      min = 35;\n      max = 10;\n      break;\n    default:\n      min = 45;\n      max = 5;\n      break;\n  }\n  let count = random(max) + min;\n  for (let i = 0; i < count; i++) {\n    do {\n      let n = random(9) - 1;\n      let m = random(9) - 1;\n      if (arr[n][m] > 0) {\n        arr[n][m] = undefined;\n        break;\n      }\n    } while (true);\n  }\n}\nexport const init = level => {\n  let result = [];\n  result[0] = generateRow();\n  for (let i = 1; i < 9; i++) {\n    result.push([]);\n    for (let j = 0; j < 9; j++) {\n      let number = nextNumber(result[i - 1][j]);\n      while (row_contains(result[i], number) || column_contains(result, j, number) || block_contains(result, i, j, number)) {\n        number = nextNumber(number);\n      }\n      result[i][j] = number;\n    }\n  }\n  switchRowAndColumn(result);\n  clearCells(level, result);\n  return result;\n};"],"names":["nextNumber","num","row_contains","arr","_step","_iterator","_createForOfIteratorHelper","s","n","done","j","value","err","e","f","column_contains","column","_step2","_iterator2","block_contains","i","row","Math","floor","temp","k","l","switchRow","length","switchColumn","random","seeds","ceil","init","level","result","generateRow","push","number","times","switchRowAndColumn","min","max","count","m","undefined","clearCells"],"sourceRoot":""}